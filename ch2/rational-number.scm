#!/usr/bin/guile
!#

(define-module (rational-number)
               #: export (install-rational-number-package
                           make-rat))

(add-to-load-path ".")
(use-modules (generic-arithmetic))

(define (install-rational-number-package)
  (define (numer x) (car x))
  (define (denom x) (cdr x))
  (define (is-zero x) (= (car x) 0))
  (define (make-rat n d)
    (if (= d 0)
        (error "分母为0 -- MAKE-RAT" (list n d))
        (if (or (and (> n 0) (> d 0)) (and (< n 0) (> d 0)))
            (let ((g (gcd n d)))
              (cons (/ n g) (/ d g)))
            (make-rat (- 0 n) (- 0 d)))))
  (define (add-rat x y)
    (make-rat (+ (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (sub-rat x y)
    (make-rat (- (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (mul-rat x y)
    (make-rat (* (numer x) (numer y))
              (* (denom x) (denom y))))
  (define (div-rat x y)
    (if (is-zero y)
        (error "除数为0 -- DIV-RAT" y)
        (mul-rat x
                 (make-rat (denom y) (numer y)))))
  (define (equ?-rat x y)
    (and (= (numer x) (numer y)) (= (denom x) (denom y))))

  (define (tag x) (attach-tag 'rational x))
  (put 'add '(rational rational) (lambda (x y) (tag (add-rat x y))))
  (put 'sub '(rational rational) (lambda (x y) (tag (sub-rat x y))))
  (put 'mul '(rational rational) (lambda (x y) (tag (mul-rat x y))))
  (put 'div '(rational rational) (lambda (x y) (tag (div-rat x y))))
  (put 'equ? '(rational rational) (lambda (x y) (equ?-rat x y)))
  (put 'denom '(rational) (lambda (x) (denom x)))
  (put 'numer '(rational) (lambda (x) (numer x)))
  (put 'make 'rational (lambda (n d) (tag (make-rat n d)))))

(define (make-rat n d)
  ((get 'make 'rational) n d))
